name: Building for all OSs

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - '**.md'
  pull_request:
  workflow_dispatch:

env:
  latest_version: '1.20'

jobs:
  checkvalidity:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go Environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.latest_version }}
          check-latest: true
          cache: false
    
      - name: Install Prerequisites
        run: |
          go install golang.org/x/tools/go/analysis/passes/fieldalignment/cmd/fieldalignment@latest
          npm install -g sass

      - name: Check fieldalignment
        run: |
          fieldalignment types.go
          didFail=$?
          if [ $didFail -ne 0 ]; then
            exit 1
          fi
        working-directory: src/logic/types
      
      - name: Check SCSS
        run: |
          sass --style=compressed --no-source-map main.scss main.min.css
          didFail=$?
          if [ $didFail -ne 0 ]; then
            exit 1
          fi
        working-directory: src/router/css
      
  runtests:
    strategy:
      matrix:
        goversion: ['1.19', '1.20']
        platform: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    needs: checkvalidity
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go Environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.goversion }}
          check-latest: true
          cache: false
      
      - name: Run Tests
        run: go test -v -race .
        working-directory: src/router

  updateversion:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: runtests
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Bump Version and Compile SCSS
      run: |
        version=$(cat "src/logic/version/VERSION.txt")
        files=("src/logic/version/VERSION.txt")

        for i in "${files[@]}"
        do
          echo -n "$(($version + 1))" > "$i"
        done
        
        npm install -g sass

        sass --style=compressed --no-source-map src/router/css/main.scss src/router/css/main.min.css

        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"

        git add .
        git commit -m "ðŸ¤– [AUTO]: Version bump to $(($version + 1))" -m "For any changes, check the previous (${{github.event.after}}) commit."
        git push

  linuxbuild:
    runs-on: ubuntu-latest
    needs: updateversion
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Go Environment
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.latest_version }}
        check-latest: true
        cache: false
        
    - name: Main Linux Build
      run: |
        echo "Updating Go Dependencies"
        go get -u
                
        echo "Installing Sass"
        npm install -g sass
        
        echo "Converting SCSS to CSS"
        sass --style=compressed --no-source-map ../../src/router/css/main.scss ../../src/router/css/main.min.css
        rm ../../src/router/css/main.scss

        echo "Building for 64bit Linux"
        go build -ldflags="-s -w" -v -o lex-amd64-linux main.go

        echo "Building 64bit Updater"
        go build -ldflags="-s -w" -v -o updater-amd64 ../../src/logic/update/updater.go
        
        echo "Building for 32bit Linux"
        GOARCH=386 go build -ldflags="-s -w" -v -o lex-i386-linux main.go

        echo "Building 32bit Updater"
        GOARCH=386 go build -ldflags="-s -w" -v -o updater-i386 ../../src/logic/update/updater.go
        
        echo "Zipping Files"
        7z a lex-linux.zip lex-i386-linux lex-amd64-linux updater-amd64 updater-i386 ../../LICENSE
        
        echo "Ok."
      working-directory: cmd/lex/
                                  
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: 'snapshot'
        files: |
          cmd/lex/lex-linux.zip
          
  macbuild:
    runs-on: macos-latest
    needs: updateversion
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Go Environment
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.latest_version }}
        check-latest: true
        cache: false
    
    - name: Main MacOS Build
      run: |
        echo "Updating Go Dependencies"
        go get -u
                
        echo "Installing Sass"
        npm install -g sass
        
        echo "Converting SCSS to CSS"
        sass --style=compressed --no-source-map ../../src/router/css/main.scss ../../src/router/css/main.min.css
        rm ../../src/router/css/main.scss

        echo "Building for Intel macOS"
        go build -ldflags="-s -w" -v -o lex-amd64-darwin main.go

        echo "Building Intel Updater"
        go build -ldflags="-s -w" -v -o updater-amd64 ../../src/logic/update/updater.go
        
        echo "Building for M1 macOS"
        GOARCH=arm64 go build -ldflags="-s -w" -v -o lex-arm64-darwin main.go

        echo "Building M1 Updater"
        GOARCH=arm64 go build -ldflags="-s -w" -v -o updater-arm64 ../../src/logic/update/updater.go
        
        echo "Zipping Files"
        7z a lex-darwin.zip lex-amd64-darwin lex-arm64-darwin updater-amd64 updater-arm64 ../../LICENSE
        
        echo "Ok."
      working-directory: cmd/lex/
                          
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: 'snapshot'
        files: |
          cmd/lex/lex-darwin.zip
          
  winbuild:
    runs-on: windows-latest
    needs: updateversion
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Go Environment
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.latest_version }}
        check-latest: true
        cache: false

    - name: Main Windows Build
      run: |
        echo "Updating Go Dependencies"
        go get -u
        
        echo "Adding Time to Github Env"
        echo "RNAME=$(Get-Date -UFormat 'snapshot %Y-%m-%d %H:%M')" >> $env:GITHUB_ENV
        echo "RTXT=$(Get-Date -UFormat '### This release was automatically generated on %A %Y/%m/%d at %H:%M')" >> $env:GITHUB_ENV
        
        echo "Installing Sass"
        npm install -g sass
        
        echo "Converting SCSS to CSS"
        sass --style=compressed --no-source-map ../../src/router/css/main.scss ../../src/router/css/main.min.css
        del ../../src/router/css/main.scss

        echo "Building for 64bit Windows"
        go build -ldflags="-s -w" -v -o lex-amd64-windows.exe main.go

        echo "Building 64bit Updater"
        go build -ldflags="-s -w" -v -o updater-amd64.exe ../../src/logic/update/updater.go
        
        echo "Building for 32bit Windows"
        $Env:GOARCH = '386'
        go build -ldflags="-s -w" -v -o lex-i386-windows.exe main.go

        echo "Building 32bit Updater"
        $Env:GOARCH = '386'
        go build -ldflags="-s -w" -v -o updater-i386.exe ../../src/logic/update/updater.go
        
        echo "Zipping Files"
        7z a lex-windows.zip lex-i386-windows.exe lex-amd64-windows.exe updater-amd64.exe updater-i386.exe ../../LICENSE
        
        echo "Ok."
      working-directory: cmd/lex/
                                
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ env.RNAME }}
        body: ${{ env.RTXT }}
        tag_name: 'snapshot'
        files: |
          cmd/lex/lex-windows.zip
