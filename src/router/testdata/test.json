{"kind": "Listing", "data": {"after": "t3_147mv0q", "dist": 27, "modhash": "", "geo_filter": null, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "This post will be stickied at the top of [r/golang](https://www.reddit.com/r/golang/) until the last week of June (more or less).\n\nPlease adhere to the following rules when posting:\n\n**Rules for individuals:**\n\n* Don't create top-level comments; those are for employers.\n* Feel free to reply to top-level comments with on-topic questions.\n* Meta-discussion should be reserved for the distinguished mod comment.\n\n**Rules for employers:**\n\n* To make a top-level comment you must be hiring directly, or a focused third party recruiter with **specific jobs with named companies** in hand. No recruiter fishing for contacts please.\n* The job must involve working with Go on a regular basis, even if not 100% of the time.\n* One top-level comment per employer. If you have multiple job openings, please consolidate their descriptions or mention them in replies to your own top-level comment.\n* Please base your comment on the following template:\n\n**COMPANY:** *\\[Company name; ideally link to your company's website or careers page.\\]*\n\n**TYPE:** *\\[Full time, part time, internship, contract, etc.\\]*\n\n**DESCRIPTION:** *\\[What does your team/company do, and what are you using Go for? How much experience are you seeking and what seniority levels are you hiring for? The more details the better.\\]*\n\n**LOCATION:** *\\[Where are your office or offices located? If your workplace language isn't English-speaking, please specify it.\\]*\n\n**ESTIMATED COMPENSATION:** *\\[Please attempt to provide at least a rough expectation of wages/salary.If you can't state a number for compensation, omit this field. Do not just say \"competitive\". Everyone says their compensation is \"competitive\".If you are listing several positions in the \"Description\" field above, then feel free to include this information inline above, and put \"See above\" in this field.If compensation is expected to be offset by other benefits, then please include that information here as well.\\]*\n\n**REMOTE:** *\\[Do you offer the option of working remotely? If so, do you require employees to live in certain areas or time zones?\\]*\n\n**VISA:** *\\[Does your company sponsor visas?\\]*\n\n**CONTACT:** *\\[How can someone get in touch with you?\\]*", "author_fullname": "t2_9duv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's Hiring? - June 2023", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_141popu", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.96, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 50, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 50, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1685994792.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003EThis post will be stickied at the top of \u003Ca href=\"https://www.reddit.com/r/golang/\"\u003Er/golang\u003C/a\u003E until the last week of June (more or less).\u003C/p\u003E\n\n\u003Cp\u003EPlease adhere to the following rules when posting:\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ERules for individuals:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EDon\u0026#39;t create top-level comments; those are for employers.\u003C/li\u003E\n\u003Cli\u003EFeel free to reply to top-level comments with on-topic questions.\u003C/li\u003E\n\u003Cli\u003EMeta-discussion should be reserved for the distinguished mod comment.\u003C/li\u003E\n\u003C/ul\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ERules for employers:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ETo make a top-level comment you must be hiring directly, or a focused third party recruiter with \u003Cstrong\u003Especific jobs with named companies\u003C/strong\u003E in hand. No recruiter fishing for contacts please.\u003C/li\u003E\n\u003Cli\u003EThe job must involve working with Go on a regular basis, even if not 100% of the time.\u003C/li\u003E\n\u003Cli\u003EOne top-level comment per employer. If you have multiple job openings, please consolidate their descriptions or mention them in replies to your own top-level comment.\u003C/li\u003E\n\u003Cli\u003EPlease base your comment on the following template:\u003C/li\u003E\n\u003C/ul\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ECOMPANY:\u003C/strong\u003E \u003Cem\u003E[Company name; ideally link to your company\u0026#39;s website or careers page.]\u003C/em\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ETYPE:\u003C/strong\u003E \u003Cem\u003E[Full time, part time, internship, contract, etc.]\u003C/em\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EDESCRIPTION:\u003C/strong\u003E \u003Cem\u003E[What does your team/company do, and what are you using Go for? How much experience are you seeking and what seniority levels are you hiring for? The more details the better.]\u003C/em\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ELOCATION:\u003C/strong\u003E \u003Cem\u003E[Where are your office or offices located? If your workplace language isn\u0026#39;t English-speaking, please specify it.]\u003C/em\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EESTIMATED COMPENSATION:\u003C/strong\u003E \u003Cem\u003E[Please attempt to provide at least a rough expectation of wages/salary.If you can\u0026#39;t state a number for compensation, omit this field. Do not just say \u0026quot;competitive\u0026quot;. Everyone says their compensation is \u0026quot;competitive\u0026quot;.If you are listing several positions in the \u0026quot;Description\u0026quot; field above, then feel free to include this information inline above, and put \u0026quot;See above\u0026quot; in this field.If compensation is expected to be offset by other benefits, then please include that information here as well.]\u003C/em\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EREMOTE:\u003C/strong\u003E \u003Cem\u003E[Do you offer the option of working remotely? If so, do you require employees to live in certain areas or time zones?]\u003C/em\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EVISA:\u003C/strong\u003E \u003Cem\u003E[Does your company sponsor visas?]\u003C/em\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ECONTACT:\u003C/strong\u003E \u003Cem\u003E[How can someone get in touch with you?]\u003C/em\u003E\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": "confidence", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "141popu", "is_robot_indexable": true, "report_reasons": null, "author": "jerf", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/141popu/whos_hiring_june_2023/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/golang/comments/141popu/whos_hiring_june_2023/", "subreddit_subscribers": 207490, "created_utc": 1685994792.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "It may be a bit late, but per community desire this sub is restricted to protest the Reddit API changes, as many others are.\n\nAs a learning community a full shutdown seems harsh on those who have open questions.", "author_fullname": "t2_9duv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Reddit API Protest", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147zgzw", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.84, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 279, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 279, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1686608759.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003EIt may be a bit late, but per community desire this sub is restricted to protest the Reddit API changes, as many others are.\u003C/p\u003E\n\n\u003Cp\u003EAs a learning community a full shutdown seems harsh on those who have open questions.\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": true, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "147zgzw", "is_robot_indexable": true, "report_reasons": null, "author": "jerf", "discussion_type": null, "num_comments": 0, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147zgzw/reddit_api_protest/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/golang/comments/147zgzw/reddit_api_protest/", "subreddit_subscribers": 207490, "created_utc": 1686608759.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I've been grappling with a challenge related to transactions between various databases and services, and I'm eager to learn from your experiences. If you've encountered a similar situation or found effective solutions, I'd greatly appreciate your insights.\n\nIn this project, i have multiple databases and services that need to communicate and exchange data seamlessly. However, maintaining transactional integrity across these different systems has proven to be quite a hurdle. I want to ensure that all related operations either succeed or fail together, avoiding any inconsistencies or data discrepancies.\n\nSome of the databases and services i am working with include (but are not limited to):\n- PostgreSQL\n- Amazon Web Services (AWS) services (e.g., S3, DynamoDB)\n\nI'd love to hear from you about your experiences and best practices in dealing with similar scenarios. Here are some questions to guide the discussion, but feel free to share any insights you think might be helpful:\n\n1. Have you faced challenges with transactions between different databases and services? How did you approach them?\n2. What tools, libraries, or frameworks have you found effective in achieving transactional consistency across various systems?\n3. Did you implement any specific architectural patterns or design principles to facilitate smooth transactions?\n4. How did you handle scenarios where one part of the transaction fails, and subsequent rollbacks or compensating actions are required?\n5. Have you encountered any pitfalls or lessons learned while tackling this issue?\n\nPlease share your thoughts, experiences, and any other suggestions you may have.", "author_fullname": "t2_kg1mukxr", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How did you solve the problem of transactions between different databases and services?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147uc6v", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 65, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "discussion", "can_mod_post": false, "score": 65, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": 1686595766.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1686595388.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003EI\u0026#39;ve been grappling with a challenge related to transactions between various databases and services, and I\u0026#39;m eager to learn from your experiences. If you\u0026#39;ve encountered a similar situation or found effective solutions, I\u0026#39;d greatly appreciate your insights.\u003C/p\u003E\n\n\u003Cp\u003EIn this project, i have multiple databases and services that need to communicate and exchange data seamlessly. However, maintaining transactional integrity across these different systems has proven to be quite a hurdle. I want to ensure that all related operations either succeed or fail together, avoiding any inconsistencies or data discrepancies.\u003C/p\u003E\n\n\u003Cp\u003ESome of the databases and services i am working with include (but are not limited to):\n- PostgreSQL\n- Amazon Web Services (AWS) services (e.g., S3, DynamoDB)\u003C/p\u003E\n\n\u003Cp\u003EI\u0026#39;d love to hear from you about your experiences and best practices in dealing with similar scenarios. Here are some questions to guide the discussion, but feel free to share any insights you think might be helpful:\u003C/p\u003E\n\n\u003Col\u003E\n\u003Cli\u003EHave you faced challenges with transactions between different databases and services? How did you approach them?\u003C/li\u003E\n\u003Cli\u003EWhat tools, libraries, or frameworks have you found effective in achieving transactional consistency across various systems?\u003C/li\u003E\n\u003Cli\u003EDid you implement any specific architectural patterns or design principles to facilitate smooth transactions?\u003C/li\u003E\n\u003Cli\u003EHow did you handle scenarios where one part of the transaction fails, and subsequent rollbacks or compensating actions are required?\u003C/li\u003E\n\u003Cli\u003EHave you encountered any pitfalls or lessons learned while tackling this issue?\u003C/li\u003E\n\u003C/ol\u003E\n\n\u003Cp\u003EPlease share your thoughts, experiences, and any other suggestions you may have.\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": "confidence", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "9e5210de-a6bd-11ec-91c2-421ae0601829", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#46d160", "id": "147uc6v", "is_robot_indexable": true, "report_reasons": null, "author": "Puzzleheaded_Fox6537", "discussion_type": null, "num_comments": 31, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147uc6v/how_did_you_solve_the_problem_of_transactions/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/147uc6v/how_did_you_solve_the_problem_of_transactions/", "subreddit_subscribers": 207490, "created_utc": 1686595388.0, "num_crossposts": 1, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "[pgregory.net/rapid](https://pgregory.net/rapid) is a modern Go property-based testing library initially inspired by the power and convenience of Python's [Hypothesis](https://github.com/HypothesisWorks/hypothesis).\n\nRapid checks that properties you define hold for a large number of automatically generated test cases. If a failure is found, rapid automatically minimizes the failing test case before presenting it.\n\nRapid features:\n\n- Imperative Go API with type-safe data generation using generics\n- Data generation biased to explore \"small\" values and edge cases more thoroughly\n- Fully automatic minimization of failing test cases\n- Persistence and automatic re-running of minimized failing test cases\n- Support for state machine (\"stateful\" or \"model-based\") testing\n- No dependencies outside the Go standard library\n\nThe documentation also contains [examples](https://github.com/flyingmutant/rapid#examples) and a very short [introduction](https://github.com/flyingmutant/rapid#what-is-property-based-testing) to property-based testing.\n\nv1.0 marks the first stable release more than 4 years after the initial [announcement](https://www.reddit.com/r/golang/comments/ao5siv/ann_rapid_propertybased_testing_library_with/) on this subreddit.", "author_fullname": "t2_3t9w", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "pgregory.net/rapid v1.0.0, modern Go property-based testing library", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147x6iy", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.79, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 16, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "show \u0026 tell", "can_mod_post": false, "score": 16, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1686602712.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003E\u003Ca href=\"https://pgregory.net/rapid\"\u003Epgregory.net/rapid\u003C/a\u003E is a modern Go property-based testing library initially inspired by the power and convenience of Python\u0026#39;s \u003Ca href=\"https://github.com/HypothesisWorks/hypothesis\"\u003EHypothesis\u003C/a\u003E.\u003C/p\u003E\n\n\u003Cp\u003ERapid checks that properties you define hold for a large number of automatically generated test cases. If a failure is found, rapid automatically minimizes the failing test case before presenting it.\u003C/p\u003E\n\n\u003Cp\u003ERapid features:\u003C/p\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EImperative Go API with type-safe data generation using generics\u003C/li\u003E\n\u003Cli\u003EData generation biased to explore \u0026quot;small\u0026quot; values and edge cases more thoroughly\u003C/li\u003E\n\u003Cli\u003EFully automatic minimization of failing test cases\u003C/li\u003E\n\u003Cli\u003EPersistence and automatic re-running of minimized failing test cases\u003C/li\u003E\n\u003Cli\u003ESupport for state machine (\u0026quot;stateful\u0026quot; or \u0026quot;model-based\u0026quot;) testing\u003C/li\u003E\n\u003Cli\u003ENo dependencies outside the Go standard library\u003C/li\u003E\n\u003C/ul\u003E\n\n\u003Cp\u003EThe documentation also contains \u003Ca href=\"https://github.com/flyingmutant/rapid#examples\"\u003Eexamples\u003C/a\u003E and a very short \u003Ca href=\"https://github.com/flyingmutant/rapid#what-is-property-based-testing\"\u003Eintroduction\u003C/a\u003E to property-based testing.\u003C/p\u003E\n\n\u003Cp\u003Ev1.0 marks the first stable release more than 4 years after the initial \u003Ca href=\"https://www.reddit.com/r/golang/comments/ao5siv/ann_rapid_propertybased_testing_library_with/\"\u003Eannouncement\u003C/a\u003E on this subreddit.\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": "confidence", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "8e5426fe-a6bd-11ec-a6a4-1ed4e247a1dd", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#7193ff", "id": "147x6iy", "is_robot_indexable": true, "report_reasons": null, "author": "pgregory", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147x6iy/pgregorynetrapid_v100_modern_go_propertybased/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/147x6iy/pgregorynetrapid_v100_modern_go_propertybased/", "subreddit_subscribers": 207490, "created_utc": 1686602712.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hey all,\n\nI'm currently learning Go and my first objective was to program the [computation of pi with the Monte Carlo](https://www.geeksforgeeks.org/estimating-value-pi-using-monte-carlo/) method. My idea is to calculate pi in the background and show the result every second, for three seconds in total. You can also see the number of iterations at that particular timestep.\n\n**First version \\[1\\]:** Use one goroutine which calculates pi in the background. Main thread (or goroutine?) displays the value every second.\n\n**Second version \\[2\\]:** Spawn a number goroutines which compute pi and give the intermediate into a channel every *n* iterations. Another goroutine listens for messages of the channel, and computes the current approximation of pi with these results. This should be faster because it's parallelized, right?\n\n**However**, the second version is slower! But why? Maybe the synchronisation work takes too much work? On the first version, I have 83 million iterations in 3 seconds, on the second version (with 4 goroutines) its 11 million iterations in 3 seconds (measured on MacBook Pro 2015).\n\n**What am I missing?**\n\n\\[1\\]\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"math/rand\"\n\t\"time\"\n\t\"sync/atomic\"\n)\n\n// Calculate pi with monte carlo method (endless loop)\nfunc CalculatePi(in_circle *int64, out_circle *int64) {\n\tfor {\n\t\tx, y := rand.Float64(), rand.Float64()\n\t\tisin := (math.Sqrt(x*x + y*y) \u003C= 1.)\n\t\tif isin {\n\t\t\tatomic.AddInt64(in_circle, 1)\n\t\t} else {\n\t\t\tatomic.AddInt64(out_circle, 1)\n\t\t}\n\t}\n}\n\nfunc main() {\n\tvar in_circle int64 = 0\n\tvar out_circle int64 = 0\n\n\tgo CalculatePi(\u0026in_circle, \u0026out_circle)\n\n\t// Display result every second (for 3 seconds in total)\n\tfor i := 0; i\u003C3; i++ {\n\t\ttime.Sleep(time.Second)\n\t\tin_local  := atomic.LoadInt64(\u0026in_circle)\n\t\tout_local := atomic.LoadInt64(\u0026out_circle)\n\t\titerations := in_local + out_local\n\t\tpi := float64(in_local) / float64(in_local + out_local) * 4\n\t\t\n\t\tfmt.Println(iterations, \": \", pi)\n\t}\n}\n```\n\n\\[2\\]\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"math/rand\"\n\t\"time\"\n)\n\n// Data structure to hold temporary calculations for pi\ntype PiCalc struct {\n\t// Points inside of unit circle\n\tinside  int\n\t// Points outside of unit circle\n\toutside int\n}\n// Combine two results of pi calculation\nfunc (x *PiCalc) add(y PiCalc) {\n\tx.inside = x.inside + y.inside\n\tx.outside = x.outside + y.outside\n}\n// Return number of iterations in simulation\nfunc (x PiCalc) iterations() int {\n\treturn x.inside + x.outside\n}\n\n// Calculate pi with given iterations, then return result\nfunc CalculatePi(iter int) PiCalc {\n\tvar calc PiCalc\n\tfor i := 0; i\u003Citer; i++ {\n\t\tx, y := rand.Float64(), rand.Float64()\n\t\tisin := (math.Sqrt(x*x + y*y) \u003C 1.)\n\t\tif isin {\n\t\t\tcalc.inside += 1\n\t\t} else {\n\t\t\tcalc.outside += 1\n\t\t}\n\t}\n\treturn calc\n}\n\n// Endlessly compute pi, and give result into channel every \u003Citer\u003E iterations \nfunc CalculatePiChannel(messages chan PiCalc, iter int) {\n\tfor {\n\t\tmessages \u003C- CalculatePi(iter)\n\t}\n}\n\nfunc main() {\n\t// Settings\n\tnumGoroutines := 4\n\tnumIterations := 10_000\n\t// Running variables\n\tvar pi float64   // current calculation of pi\n\tvar calc PiCalc  // hold intermediate values\n\tmessages := make(chan PiCalc)\n\n\t// Start number of goroutines which calculcate pi\n\tfor i := 0; i\u003CnumGoroutines; i++ {\n\t\tgo CalculatePiChannel(messages, numIterations)\n\t}\n\n\t// Goroutine which captures messages and calculates pi\n\tgo func() {\n\t\tfor {\n\t\t\tcalc.add(\u003C- messages)\n\t\t\tpi = float64(calc.inside) / float64(calc.inside + calc.outside) * 4\n\t\t}\n\t}()\n\n\t// Print current value of pi every second\n\tfor i := 0; i\u003C3; i++ {\n\t\ttime.Sleep(time.Second)\n\t\tfmt.Println(calc.iterations(), \": \", pi)\n\t}\n}\n```\n\nIf you see any improvements to my code, let me know! I'm just starting to learn this language!", "author_fullname": "t2_cwy7q", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "One goroutine faster than multiple with long-running calculation (with channels)?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147smgm", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.84, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 22, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 22, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": 1686591264.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1686590961.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003EHey all,\u003C/p\u003E\n\n\u003Cp\u003EI\u0026#39;m currently learning Go and my first objective was to program the \u003Ca href=\"https://www.geeksforgeeks.org/estimating-value-pi-using-monte-carlo/\"\u003Ecomputation of pi with the Monte Carlo\u003C/a\u003E method. My idea is to calculate pi in the background and show the result every second, for three seconds in total. You can also see the number of iterations at that particular timestep.\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EFirst version [1]:\u003C/strong\u003E Use one goroutine which calculates pi in the background. Main thread (or goroutine?) displays the value every second.\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ESecond version [2]:\u003C/strong\u003E Spawn a number goroutines which compute pi and give the intermediate into a channel every \u003Cem\u003En\u003C/em\u003E iterations. Another goroutine listens for messages of the channel, and computes the current approximation of pi with these results. This should be faster because it\u0026#39;s parallelized, right?\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EHowever\u003C/strong\u003E, the second version is slower! But why? Maybe the synchronisation work takes too much work? On the first version, I have 83 million iterations in 3 seconds, on the second version (with 4 goroutines) its 11 million iterations in 3 seconds (measured on MacBook Pro 2015).\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EWhat am I missing?\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cp\u003E[1]\n```go\npackage main\u003C/p\u003E\n\n\u003Cp\u003Eimport (\n    \u0026quot;fmt\u0026quot;\n    \u0026quot;math\u0026quot;\n    \u0026quot;math/rand\u0026quot;\n    \u0026quot;time\u0026quot;\n    \u0026quot;sync/atomic\u0026quot;\n)\u003C/p\u003E\n\n\u003Cp\u003E// Calculate pi with monte carlo method (endless loop)\nfunc CalculatePi(in_circle \u003Cem\u003Eint64, out_circle *int64) {\n    for {\n        x, y := rand.Float64(), rand.Float64()\n        isin := (math.Sqrt(x\u003C/em\u003Ex + y*y) \u0026lt;= 1.)\n        if isin {\n            atomic.AddInt64(in_circle, 1)\n        } else {\n            atomic.AddInt64(out_circle, 1)\n        }\n    }\n}\u003C/p\u003E\n\n\u003Cp\u003Efunc main() {\n    var in_circle int64 = 0\n    var out_circle int64 = 0\u003C/p\u003E\n\n\u003Cpre\u003E\u003Ccode\u003Ego CalculatePi(\u0026amp;in_circle, \u0026amp;out_circle)\n\n// Display result every second (for 3 seconds in total)\nfor i := 0; i\u0026lt;3; i++ {\n    time.Sleep(time.Second)\n    in_local  := atomic.LoadInt64(\u0026amp;in_circle)\n    out_local := atomic.LoadInt64(\u0026amp;out_circle)\n    iterations := in_local + out_local\n    pi := float64(in_local) / float64(in_local + out_local) * 4\n\n    fmt.Println(iterations, \u0026quot;: \u0026quot;, pi)\n}\n\u003C/code\u003E\u003C/pre\u003E\n\n\u003Cp\u003E}\n```\u003C/p\u003E\n\n\u003Cp\u003E[2]\n```go\npackage main\u003C/p\u003E\n\n\u003Cp\u003Eimport (\n    \u0026quot;fmt\u0026quot;\n    \u0026quot;math\u0026quot;\n    \u0026quot;math/rand\u0026quot;\n    \u0026quot;time\u0026quot;\n)\u003C/p\u003E\n\n\u003Cp\u003E// Data structure to hold temporary calculations for pi\ntype PiCalc struct {\n    // Points inside of unit circle\n    inside  int\n    // Points outside of unit circle\n    outside int\n}\n// Combine two results of pi calculation\nfunc (x *PiCalc) add(y PiCalc) {\n    x.inside = x.inside + y.inside\n    x.outside = x.outside + y.outside\n}\n// Return number of iterations in simulation\nfunc (x PiCalc) iterations() int {\n    return x.inside + x.outside\n}\u003C/p\u003E\n\n\u003Cp\u003E// Calculate pi with given iterations, then return result\nfunc CalculatePi(iter int) PiCalc {\n    var calc PiCalc\n    for i := 0; i\u0026lt;iter; i++ {\n        x, y := rand.Float64(), rand.Float64()\n        isin := (math.Sqrt(x\u003Cem\u003Ex + y\u003C/em\u003Ey) \u0026lt; 1.)\n        if isin {\n            calc.inside += 1\n        } else {\n            calc.outside += 1\n        }\n    }\n    return calc\n}\u003C/p\u003E\n\n\u003Cp\u003E// Endlessly compute pi, and give result into channel every \u0026lt;iter\u0026gt; iterations \nfunc CalculatePiChannel(messages chan PiCalc, iter int) {\n    for {\n        messages \u0026lt;- CalculatePi(iter)\n    }\n}\u003C/p\u003E\n\n\u003Cp\u003Efunc main() {\n    // Settings\n    numGoroutines := 4\n    numIterations := 10_000\n    // Running variables\n    var pi float64   // current calculation of pi\n    var calc PiCalc  // hold intermediate values\n    messages := make(chan PiCalc)\u003C/p\u003E\n\n\u003Cpre\u003E\u003Ccode\u003E// Start number of goroutines which calculcate pi\nfor i := 0; i\u0026lt;numGoroutines; i++ {\n    go CalculatePiChannel(messages, numIterations)\n}\n\n// Goroutine which captures messages and calculates pi\ngo func() {\n    for {\n        calc.add(\u0026lt;- messages)\n        pi = float64(calc.inside) / float64(calc.inside + calc.outside) * 4\n    }\n}()\n\n// Print current value of pi every second\nfor i := 0; i\u0026lt;3; i++ {\n    time.Sleep(time.Second)\n    fmt.Println(calc.iterations(), \u0026quot;: \u0026quot;, pi)\n}\n\u003C/code\u003E\u003C/pre\u003E\n\n\u003Cp\u003E}\n```\u003C/p\u003E\n\n\u003Cp\u003EIf you see any improvements to my code, let me know! I\u0026#39;m just starting to learn this language!\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/kVnBrWGTrbn8IcPl7jUrXtEdtv9OiF6cB5yvHuhS0DQ.jpg?auto=webp\u0026v=enabled\u0026s=3d1e12b29962c29b283f923a8285f732781426f8", "width": 200, "height": 200}, "resolutions": [{"url": "https://external-preview.redd.it/kVnBrWGTrbn8IcPl7jUrXtEdtv9OiF6cB5yvHuhS0DQ.jpg?width=108\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=82c07b6e523f5002d402aeb9b881bb14b774c110", "width": 108, "height": 108}], "variants": {}, "id": "LrwawBOrEFhMR9Nbh20vF8BGtS6Co_BAR39WQmpv-34"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "147smgm", "is_robot_indexable": true, "report_reasons": null, "author": "Krystexx", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147smgm/one_goroutine_faster_than_multiple_with/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/147smgm/one_goroutine_faster_than_multiple_with/", "subreddit_subscribers": 207490, "created_utc": 1686590961.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Could we go offline now?", "author_fullname": "t2_aoznm", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why did we not go offline for the protest?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147c6sj", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.76, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 286, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 286, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1686535674.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003ECould we go offline now?\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "147c6sj", "is_robot_indexable": true, "report_reasons": null, "author": "2012DOOM", "discussion_type": null, "num_comments": 222, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147c6sj/why_did_we_not_go_offline_for_the_protest/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/147c6sj/why_did_we_not_go_offline_for_the_protest/", "subreddit_subscribers": 207490, "created_utc": 1686535674.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hey Golang peeps!  \nI created a site https://pypup.com that teaches programming through organized and repetitive structure. It has received very positive feedback amongst python/java/c++ community and other popular languages.  \nI finally added Go as a language and feel free to give any feedback.", "author_fullname": "t2_x6andr", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Learning Go through organized and repetitive practice", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147izpg", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 85, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 85, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1686559328.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003EHey Golang peeps!\u003Cbr/\u003E\nI created a site \u003Ca href=\"https://pypup.com\"\u003Ehttps://pypup.com\u003C/a\u003E that teaches programming through organized and repetitive structure. It has received very positive feedback amongst python/java/c++ community and other popular languages.\u003Cbr/\u003E\nI finally added Go as a language and feel free to give any feedback.\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/pM5F0X4ckBfyhjHm7sj_fVC451xxzJXg_LWWBjgpqKA.jpg?auto=webp\u0026v=enabled\u0026s=2691d125df3e5084d8702d5bcc456c672ea93113", "width": 480, "height": 480}, "resolutions": [{"url": "https://external-preview.redd.it/pM5F0X4ckBfyhjHm7sj_fVC451xxzJXg_LWWBjgpqKA.jpg?width=108\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=2cc233d92d958ab9bfd60d929d38074f76b5d3b9", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/pM5F0X4ckBfyhjHm7sj_fVC451xxzJXg_LWWBjgpqKA.jpg?width=216\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=bac3d037dcb0ec5b9350b3ba56531860bfcefa5c", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/pM5F0X4ckBfyhjHm7sj_fVC451xxzJXg_LWWBjgpqKA.jpg?width=320\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=5262a8c948e81477ce4de56f5a828ca4588f5b3c", "width": 320, "height": 320}], "variants": {}, "id": "IPrBYoJcVThtVpzFLqZrDlMp7FfX0p2MfEy0XEY3zfU"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "147izpg", "is_robot_indexable": true, "report_reasons": null, "author": "tsenguunee1", "discussion_type": null, "num_comments": 33, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147izpg/learning_go_through_organized_and_repetitive/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/147izpg/learning_go_through_organized_and_repetitive/", "subreddit_subscribers": 207490, "created_utc": 1686559328.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_emav4r8e", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Warrant v0.19 - Open source, Zanzibar-inspired application authorization and access control service now with support for ABAC policies", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": 70, "top_awarded_type": null, "hide_score": false, "name": "t3_147sx11", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.88, "author_flair_background_color": null, "ups": 13, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "show \u0026 tell", "can_mod_post": false, "score": 13, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/eBwCPTsZngGrAUj3X5SJOj0W8IXOKOmd_Mek7AMyBLg.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "subreddit_type": "restricted", "created": 1686591709.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": "confidence", "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/warrant-dev/warrant", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/MKuxN-bxK1O2UcnRErAB5KjXf9tYkFKa1k6jEahsNhk.jpg?auto=webp\u0026v=enabled\u0026s=c179f9958716f8ff86499c76de8f7eb17a55950e", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/MKuxN-bxK1O2UcnRErAB5KjXf9tYkFKa1k6jEahsNhk.jpg?width=108\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=46c7a2b6e83162d24a386dd7b4281646cbd7f1de", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/MKuxN-bxK1O2UcnRErAB5KjXf9tYkFKa1k6jEahsNhk.jpg?width=216\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=8f46e25e081ef7f318487eed8f451cd74ff81925", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/MKuxN-bxK1O2UcnRErAB5KjXf9tYkFKa1k6jEahsNhk.jpg?width=320\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=f8c2ff1f3f00f1d810b69301e62e3fe77eae8c4e", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/MKuxN-bxK1O2UcnRErAB5KjXf9tYkFKa1k6jEahsNhk.jpg?width=640\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=079f67fc4c9d936ccf05d433ae6a4fd19c76ce3d", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/MKuxN-bxK1O2UcnRErAB5KjXf9tYkFKa1k6jEahsNhk.jpg?width=960\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=16dd37fa167493f4a801016fc8112c44348a7006", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/MKuxN-bxK1O2UcnRErAB5KjXf9tYkFKa1k6jEahsNhk.jpg?width=1080\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=9f68966aaea1e06aae3f1322fc8e8ea9323a8af7", "width": 1080, "height": 540}], "variants": {}, "id": "k3Diub8PBVCz62yrTJGxTyGHEdnQL3bGvd76CfSBNBI"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "8e5426fe-a6bd-11ec-a6a4-1ed4e247a1dd", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "mod_note": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "num_reports": null, "removal_reason": null, "link_flair_background_color": "#7193ff", "id": "147sx11", "is_robot_indexable": true, "report_reasons": null, "author": "akajla09", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147sx11/warrant_v019_open_source_zanzibarinspired/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/warrant-dev/warrant", "subreddit_subscribers": 207490, "created_utc": 1686591709.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hey would love for a recomndations on Go/software engineering podcasts\n\n\u0026#x200B;\n\nThanks you!", "author_fullname": "t2_bqjrmnud", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Favorite podcasts", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147lute", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 35, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "help", "can_mod_post": false, "score": 35, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1686569571.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003EHey would love for a recomndations on Go/software engineering podcasts\u003C/p\u003E\n\n\u003Cp\u003E\u0026#x200B;\u003C/p\u003E\n\n\u003Cp\u003EThanks you!\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": "confidence", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "7c9553ca-a6bd-11ec-a947-eecae497834f", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ffb000", "id": "147lute", "is_robot_indexable": true, "report_reasons": null, "author": "Glittering_Bug105", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147lute/favorite_podcasts/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/147lute/favorite_podcasts/", "subreddit_subscribers": 207490, "created_utc": 1686569571.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I'm new to go, I thought I would use a structs and slices for this little home brew project to learn some more am I heading in the right direction?\n\nA few different users would post a simple JSON  into my server with just a couple of data points, every second each with a unique Id.\n\nId,  temp, townname \nint, float,string\n\nI would hold that information in memory and make available to anyone that requests it via a JSON post with the id of the data they want to view. No historical logging needed just the last post of info for the id which updates every second and multiple requestors can acces.\n\nI don't know the id they would be unique for each and populated by the poster, so create a record on the fly and if the id already exists since poweron then update that record.\n\nI learnt a little on structs and slices and can append a slice, but when looking at removing/updating an  existing slices etc looks to be a bit of a faf.\n\nAny thoughts on a whether it is possible and struct/slice is the right tool and I just need to learn more or look at some other way to cache/make available.\n\nThanks m", "author_fullname": "t2_iiaocvur", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Struct or memdb? or something else newb", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147s8ec", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.75, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": 1686590845.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1686589949.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003EI\u0026#39;m new to go, I thought I would use a structs and slices for this little home brew project to learn some more am I heading in the right direction?\u003C/p\u003E\n\n\u003Cp\u003EA few different users would post a simple JSON  into my server with just a couple of data points, every second each with a unique Id.\u003C/p\u003E\n\n\u003Cp\u003EId,  temp, townname \nint, float,string\u003C/p\u003E\n\n\u003Cp\u003EI would hold that information in memory and make available to anyone that requests it via a JSON post with the id of the data they want to view. No historical logging needed just the last post of info for the id which updates every second and multiple requestors can acces.\u003C/p\u003E\n\n\u003Cp\u003EI don\u0026#39;t know the id they would be unique for each and populated by the poster, so create a record on the fly and if the id already exists since poweron then update that record.\u003C/p\u003E\n\n\u003Cp\u003EI learnt a little on structs and slices and can append a slice, but when looking at removing/updating an  existing slices etc looks to be a bit of a faf.\u003C/p\u003E\n\n\u003Cp\u003EAny thoughts on a whether it is possible and struct/slice is the right tool and I just need to learn more or look at some other way to cache/make available.\u003C/p\u003E\n\n\u003Cp\u003EThanks m\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "147s8ec", "is_robot_indexable": true, "report_reasons": null, "author": "the_manicminer", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147s8ec/struct_or_memdb_or_something_else_newb/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/147s8ec/struct_or_memdb_or_something_else_newb/", "subreddit_subscribers": 207490, "created_utc": 1686589949.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I am still learning Go but hopefully will start to apply Go remote roles.\n\nLearning a lot of theories makes me wonder whether I am ready for future interviews. \n\nIf you have a lot of Go experience or even interview people for Go roles at work, I wonder what your top questions to test core Go knowledge are?\n\nI mean the Go language questions not algorithm questions which are language agnostic.\n\nAppreciate any input.", "author_fullname": "t2_11mo3d", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Questions to test core Golang knowledges", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147fmci", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 33, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 33, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1686546770.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003EI am still learning Go but hopefully will start to apply Go remote roles.\u003C/p\u003E\n\n\u003Cp\u003ELearning a lot of theories makes me wonder whether I am ready for future interviews. \u003C/p\u003E\n\n\u003Cp\u003EIf you have a lot of Go experience or even interview people for Go roles at work, I wonder what your top questions to test core Go knowledge are?\u003C/p\u003E\n\n\u003Cp\u003EI mean the Go language questions not algorithm questions which are language agnostic.\u003C/p\u003E\n\n\u003Cp\u003EAppreciate any input.\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "147fmci", "is_robot_indexable": true, "report_reasons": null, "author": "stt106", "discussion_type": null, "num_comments": 13, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147fmci/questions_to_test_core_golang_knowledges/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/147fmci/questions_to_test_core_golang_knowledges/", "subreddit_subscribers": 207490, "created_utc": 1686546770.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "With the sale commencing tomorrow I wanted to see if anyone had bought in the past and what their views of them are?\n\nHonestly I think even within the sale they might still be a bit costly for me, especially considering I have unlimited Udemy through work as well as buy a book schemes, but if someone has an overwhelmingly positive view on it compared to any other courses I could be persuaded.\n\nSecondly, are the screen casts essential or would just the book suffice, as you can save a bit by just getting the e book?", "author_fullname": "t2_9wds6ha5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "John Calhoun Courses on Sale", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147l38f", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.79, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 11, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 11, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1686567024.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003EWith the sale commencing tomorrow I wanted to see if anyone had bought in the past and what their views of them are?\u003C/p\u003E\n\n\u003Cp\u003EHonestly I think even within the sale they might still be a bit costly for me, especially considering I have unlimited Udemy through work as well as buy a book schemes, but if someone has an overwhelmingly positive view on it compared to any other courses I could be persuaded.\u003C/p\u003E\n\n\u003Cp\u003ESecondly, are the screen casts essential or would just the book suffice, as you can save a bit by just getting the e book?\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "147l38f", "is_robot_indexable": true, "report_reasons": null, "author": "IzzyD93", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147l38f/john_calhoun_courses_on_sale/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/147l38f/john_calhoun_courses_on_sale/", "subreddit_subscribers": 207490, "created_utc": 1686567024.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_8m1t9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Wrote an article about Go Private Modules and GitHub Actions", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147k01r", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.82, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 7, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "show \u0026 tell", "can_mod_post": false, "score": 7, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1686563125.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "aran.dev", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": "confidence", "banned_at_utc": null, "url_overridden_by_dest": "https://aran.dev/posts/github-actions-go-private-modules/", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "8e5426fe-a6bd-11ec-a6a4-1ed4e247a1dd", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#7193ff", "id": "147k01r", "is_robot_indexable": true, "report_reasons": null, "author": "aranw", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147k01r/wrote_an_article_about_go_private_modules_and/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://aran.dev/posts/github-actions-go-private-modules/", "subreddit_subscribers": 207490, "created_utc": 1686563125.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "C# developer here. I'm looking to use Go for my next project. Efficient logging will very important. \n\nSpecifically I'm interested in Go because it provides value types (ie live on stack) just like C does. A garbage collected C is very attractive for my purposes. Although C# let's you allocate on the stack too, many libraries use the heap for everything. Go seems to leverage the stack when it makes sense.\n\nFor loggers, I looked around and found [zerolog](https://betterstack.com/community/guides/logging/zerolog/). It advertises itself as an 0 allocation logger.\n\nHowever in my testing I found this not to be the case. The results are a little surprising. If I log a stack variable it is actually re-allocated to the heap.  Even if the log is below the minimum log level, the heap allocation still occurs. I'm paying for a heap allocation for logs that do not even execute!\n    \nBelow is a simple example. With 1 stack variable \"apples\".  Apples is unexpectedly moved to the heap by go.\n\n\n    package main\n\n    import (\n        \"github.com/rs/zerolog\"\n        \"github.com/rs/zerolog/log\"\n    )\n\n    func main() {\n        // Do not write debug logs. We are in production!!!\n        zerolog.SetGlobalLevel(zerolog.ErrorLevel)\n\n        // stack variable\n        var apples int = 42\n\n        // This debug log is not executed. Minimum log level is set to Error.\n        log.Debug().Msgf(\"how many apples? %d\", apples)\n    }\n\n    \nThen I observe which variables are moved to the heap via:\n    \n    go build -gcflags=\"-m\"\n    \nWhich produces:\n\n    ./main.go:15:42: **apples escapes to heap**\n\n\nHow do I lock down the apples to the stack?\n\nAlthough this is a fictional example, I **REALLY** need my stack variables remain in place. I can't have primitive vars jumping off into the heap like lemmings without warning. It seems to defeat the advantage of Go's value types altogether. I'm not sure if something is flying over my head. I've never run into something quite so ludicrous before.\n    \nHow do you achieve high performance logging in Go?\nIs it possible as of go 1.20.5?", "author_fullname": "t2_cucswwizw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Efficient logging in Go?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147ag7i", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.8, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 26, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 26, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": 1686530792.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1686530602.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003EC# developer here. I\u0026#39;m looking to use Go for my next project. Efficient logging will very important. \u003C/p\u003E\n\n\u003Cp\u003ESpecifically I\u0026#39;m interested in Go because it provides value types (ie live on stack) just like C does. A garbage collected C is very attractive for my purposes. Although C# let\u0026#39;s you allocate on the stack too, many libraries use the heap for everything. Go seems to leverage the stack when it makes sense.\u003C/p\u003E\n\n\u003Cp\u003EFor loggers, I looked around and found \u003Ca href=\"https://betterstack.com/community/guides/logging/zerolog/\"\u003Ezerolog\u003C/a\u003E. It advertises itself as an 0 allocation logger.\u003C/p\u003E\n\n\u003Cp\u003EHowever in my testing I found this not to be the case. The results are a little surprising. If I log a stack variable it is actually re-allocated to the heap.  Even if the log is below the minimum log level, the heap allocation still occurs. I\u0026#39;m paying for a heap allocation for logs that do not even execute!\u003C/p\u003E\n\n\u003Cp\u003EBelow is a simple example. With 1 stack variable \u0026quot;apples\u0026quot;.  Apples is unexpectedly moved to the heap by go.\u003C/p\u003E\n\n\u003Cpre\u003E\u003Ccode\u003Epackage main\n\nimport (\n    \u0026quot;github.com/rs/zerolog\u0026quot;\n    \u0026quot;github.com/rs/zerolog/log\u0026quot;\n)\n\nfunc main() {\n    // Do not write debug logs. We are in production!!!\n    zerolog.SetGlobalLevel(zerolog.ErrorLevel)\n\n    // stack variable\n    var apples int = 42\n\n    // This debug log is not executed. Minimum log level is set to Error.\n    log.Debug().Msgf(\u0026quot;how many apples? %d\u0026quot;, apples)\n}\n\u003C/code\u003E\u003C/pre\u003E\n\n\u003Cp\u003EThen I observe which variables are moved to the heap via:\u003C/p\u003E\n\n\u003Cpre\u003E\u003Ccode\u003Ego build -gcflags=\u0026quot;-m\u0026quot;\n\u003C/code\u003E\u003C/pre\u003E\n\n\u003Cp\u003EWhich produces:\u003C/p\u003E\n\n\u003Cpre\u003E\u003Ccode\u003E./main.go:15:42: **apples escapes to heap**\n\u003C/code\u003E\u003C/pre\u003E\n\n\u003Cp\u003EHow do I lock down the apples to the stack?\u003C/p\u003E\n\n\u003Cp\u003EAlthough this is a fictional example, I \u003Cstrong\u003EREALLY\u003C/strong\u003E need my stack variables remain in place. I can\u0026#39;t have primitive vars jumping off into the heap like lemmings without warning. It seems to defeat the advantage of Go\u0026#39;s value types altogether. I\u0026#39;m not sure if something is flying over my head. I\u0026#39;ve never run into something quite so ludicrous before.\u003C/p\u003E\n\n\u003Cp\u003EHow do you achieve high performance logging in Go?\nIs it possible as of go 1.20.5?\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": "confidence", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/YkQeu2uRCuHt9brxSgPqDQxlfEvwhoB2kvL21GHMhPo.jpg?auto=webp\u0026v=enabled\u0026s=8dc94cb0f2bd646c30ceec86a412ae6ea1eca084", "width": 1200, "height": 630}, "resolutions": [{"url": "https://external-preview.redd.it/YkQeu2uRCuHt9brxSgPqDQxlfEvwhoB2kvL21GHMhPo.jpg?width=108\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=17c53af03e107582354a671bcacd18314a3ca43e", "width": 108, "height": 56}, {"url": "https://external-preview.redd.it/YkQeu2uRCuHt9brxSgPqDQxlfEvwhoB2kvL21GHMhPo.jpg?width=216\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=58c8a1bd01fa863d1b5b57960dcbd9446c2a2862", "width": 216, "height": 113}, {"url": "https://external-preview.redd.it/YkQeu2uRCuHt9brxSgPqDQxlfEvwhoB2kvL21GHMhPo.jpg?width=320\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=1a9c641a56c5775fb00896da45e87203327ea4f7", "width": 320, "height": 168}, {"url": "https://external-preview.redd.it/YkQeu2uRCuHt9brxSgPqDQxlfEvwhoB2kvL21GHMhPo.jpg?width=640\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=df1e7361d489f12a9fa9f4f689fec3ee946bfa5f", "width": 640, "height": 336}, {"url": "https://external-preview.redd.it/YkQeu2uRCuHt9brxSgPqDQxlfEvwhoB2kvL21GHMhPo.jpg?width=960\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=24090a7fe9ca54811b58b4616e0bc7b3bb7a78d7", "width": 960, "height": 504}, {"url": "https://external-preview.redd.it/YkQeu2uRCuHt9brxSgPqDQxlfEvwhoB2kvL21GHMhPo.jpg?width=1080\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=a737193f72ccfe2f4deba6e0faccc76aafaf7cd3", "width": 1080, "height": 567}], "variants": {}, "id": "2t7Q9eRYdL-q3zL-yzfJMeJitLOhVLzv4npFhvwLWCI"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "147ag7i", "is_robot_indexable": true, "report_reasons": null, "author": "csharp420_69", "discussion_type": null, "num_comments": 28, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147ag7i/efficient_logging_in_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/147ag7i/efficient_logging_in_go/", "subreddit_subscribers": 207490, "created_utc": 1686530602.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "https://github.com/smallnest/exp", "author_fullname": "t2_wxnwd", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "modify sync.Map, container/{heap,list,ring} to support generic", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147ev7q", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 13, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 13, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1686544166.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003E\u003Ca href=\"https://github.com/smallnest/exp\"\u003Ehttps://github.com/smallnest/exp\u003C/a\u003E\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": "confidence", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/m3kP5iAPPW-bKFTPUMWQ98T17lZCdWsjAnotTqoLVkw.jpg?auto=webp\u0026v=enabled\u0026s=e4a7cf41c189312f938ec92c2b273da9b8175b0a", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/m3kP5iAPPW-bKFTPUMWQ98T17lZCdWsjAnotTqoLVkw.jpg?width=108\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=e545642ef62ec6a415f79acf563572d46ffff0f5", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/m3kP5iAPPW-bKFTPUMWQ98T17lZCdWsjAnotTqoLVkw.jpg?width=216\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=ce0f9aa94c9c1670a22308a763e7a04d17e99196", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/m3kP5iAPPW-bKFTPUMWQ98T17lZCdWsjAnotTqoLVkw.jpg?width=320\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=113013b747315feef9ae7f73e8552ef44ce02a20", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/m3kP5iAPPW-bKFTPUMWQ98T17lZCdWsjAnotTqoLVkw.jpg?width=640\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=7530e0323b8b9f8145694b887904f594293d4fe8", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/m3kP5iAPPW-bKFTPUMWQ98T17lZCdWsjAnotTqoLVkw.jpg?width=960\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=5c499be15fc7af355335f36fb14f405d48110ba8", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/m3kP5iAPPW-bKFTPUMWQ98T17lZCdWsjAnotTqoLVkw.jpg?width=1080\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=53687faaaeb2294a41562424d0a7c51c87d3d4f4", "width": 1080, "height": 540}], "variants": {}, "id": "1K2kFlhyWbcQe7nvQe6niOR2Kui8zTwmvH_wL8Qu2Ps"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "147ev7q", "is_robot_indexable": true, "report_reasons": null, "author": "smallnest", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147ev7q/modify_syncmap_containerheaplistring_to_support/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/147ev7q/modify_syncmap_containerheaplistring_to_support/", "subreddit_subscribers": 207490, "created_utc": 1686544166.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_9oe8heu5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I\u2019ve learned Go\u2018s concurrency model by rendering fractals", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": 70, "top_awarded_type": null, "hide_score": false, "name": "t3_146tbgy", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.95, "author_flair_background_color": null, "ups": 121, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "show \u0026 tell", "can_mod_post": false, "score": 121, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/DpdPf09IYhnYfPN7Sc302uAIDVc51Hz3RAuL4jBDWfo.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "subreddit_type": "restricted", "created": 1686488308.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": "confidence", "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/joweich/fractals", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/R1JFBg8HOP0d8VE3CSZgXlmGWI1ME45GfEZapBoeA2U.jpg?auto=webp\u0026v=enabled\u0026s=ca6e037b1bbcf102f8f39bebeb78933d58d36003", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/R1JFBg8HOP0d8VE3CSZgXlmGWI1ME45GfEZapBoeA2U.jpg?width=108\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=c845943ef9b389155b3a64ab3fd815765e4081c9", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/R1JFBg8HOP0d8VE3CSZgXlmGWI1ME45GfEZapBoeA2U.jpg?width=216\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=0791f206e2250400f682aff69c3b999b50df6c34", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/R1JFBg8HOP0d8VE3CSZgXlmGWI1ME45GfEZapBoeA2U.jpg?width=320\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=764894ca0a8d37e18de04631b136d98be06b5c40", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/R1JFBg8HOP0d8VE3CSZgXlmGWI1ME45GfEZapBoeA2U.jpg?width=640\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=9f76411bb8cb518321a326f795cdaf8250e585c8", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/R1JFBg8HOP0d8VE3CSZgXlmGWI1ME45GfEZapBoeA2U.jpg?width=960\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=548bee55af853db3f51c4e5d581801e61baf7151", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/R1JFBg8HOP0d8VE3CSZgXlmGWI1ME45GfEZapBoeA2U.jpg?width=1080\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=ee81160b8bbbb3cbcd63a94017d6e6e8715dd6fd", "width": 1080, "height": 540}], "variants": {}, "id": "V3UKMUZqgbJ0P2TVcmLsJpvp92bAx-z4fpGBfQtti2Y"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "8e5426fe-a6bd-11ec-a6a4-1ed4e247a1dd", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "mod_note": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "num_reports": null, "removal_reason": null, "link_flair_background_color": "#7193ff", "id": "146tbgy", "is_robot_indexable": true, "report_reasons": null, "author": "joweich", "discussion_type": null, "num_comments": 19, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/146tbgy/ive_learned_gos_concurrency_model_by_rendering/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/joweich/fractals", "subreddit_subscribers": 207490, "created_utc": 1686488308.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "[https://itch.io/jam/ebitengine-game-jam-2023](https://itch.io/jam/ebitengine-game-jam-2023)\n\nThe Ebitengine Game Jam 2023 is starting in a few days on 15 June!\n\nIt's a 2-week game making competition to showcase the Ebitengine library by making a game based on a secret theme that'll be announced when the jam starts, it's an open event welcome to all skill levels, from advanced, to beginner, even first-time game-makers, even first-time Gophers. Details on how to join and participate in the link above :)", "author_fullname": "t2_4z8p7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Ebitengine Game Jam 2023 starting in a few days", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1474rtf", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.96, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 26, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "show \u0026 tell", "can_mod_post": false, "score": 26, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": 1686516494.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1686516198.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003E\u003Ca href=\"https://itch.io/jam/ebitengine-game-jam-2023\"\u003Ehttps://itch.io/jam/ebitengine-game-jam-2023\u003C/a\u003E\u003C/p\u003E\n\n\u003Cp\u003EThe Ebitengine Game Jam 2023 is starting in a few days on 15 June!\u003C/p\u003E\n\n\u003Cp\u003EIt\u0026#39;s a 2-week game making competition to showcase the Ebitengine library by making a game based on a secret theme that\u0026#39;ll be announced when the jam starts, it\u0026#39;s an open event welcome to all skill levels, from advanced, to beginner, even first-time game-makers, even first-time Gophers. Details on how to join and participate in the link above :)\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/wLHwVicWgzCjAD_AkgTX03e5TkXg7uOkj1jDY-hEnyg.jpg?auto=webp\u0026v=enabled\u0026s=d30ea412e3243284a2a27053741190d36b903963", "width": 630, "height": 500}, "resolutions": [{"url": "https://external-preview.redd.it/wLHwVicWgzCjAD_AkgTX03e5TkXg7uOkj1jDY-hEnyg.jpg?width=108\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=92692cbbdec65aea86cc0fb94cd63dc6e80464f8", "width": 108, "height": 85}, {"url": "https://external-preview.redd.it/wLHwVicWgzCjAD_AkgTX03e5TkXg7uOkj1jDY-hEnyg.jpg?width=216\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=6a5f876d829a00f4584081ac2ed08a4562e7b8be", "width": 216, "height": 171}, {"url": "https://external-preview.redd.it/wLHwVicWgzCjAD_AkgTX03e5TkXg7uOkj1jDY-hEnyg.jpg?width=320\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=43ecbf6aa0b513be7ba43ae4fe7c148a981238f8", "width": 320, "height": 253}], "variants": {}, "id": "NWlUaqEJ6WJszfXVpZ5aritkSHCbgXJQVGbzOIstrGQ"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "8e5426fe-a6bd-11ec-a6a4-1ed4e247a1dd", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#7193ff", "id": "1474rtf", "is_robot_indexable": true, "report_reasons": null, "author": "sinisterstuf", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/1474rtf/ebitengine_game_jam_2023_starting_in_a_few_days/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/1474rtf/ebitengine_game_jam_2023_starting_in_a_few_days/", "subreddit_subscribers": 207490, "created_utc": 1686516198.0, "num_crossposts": 1, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I'm looking for something like hands-on exercise and solutions similar to leetcode-style to help me better understand the mechanics and when/where it is appropriate to use them.\n\nThanks!", "author_fullname": "t2_jq0oiqjl", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Does anyone have any good resources to practice channel, context, and goroutine?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_14792pa", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.89, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 13, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "newbie ", "can_mod_post": false, "score": 13, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1686526724.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003EI\u0026#39;m looking for something like hands-on exercise and solutions similar to leetcode-style to help me better understand the mechanics and when/where it is appropriate to use them.\u003C/p\u003E\n\n\u003Cp\u003EThanks!\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": "confidence", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "fee5f9ce-a79e-11ec-9b00-9e8ff7414444", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "14792pa", "is_robot_indexable": true, "report_reasons": null, "author": "cscqmain", "discussion_type": null, "num_comments": 13, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/14792pa/does_anyone_have_any_good_resources_to_practice/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/14792pa/does_anyone_have_any_good_resources_to_practice/", "subreddit_subscribers": 207490, "created_utc": 1686526724.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "How to find all methods which return struct \"Foo\".\n\nI use vscode, but a cli would be great, too.\n\nBut it should not rely on grep or regexs. It should work via AST.", "author_fullname": "t2_13dy25", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to find all methods which return struct \"Foo\" (vscode or cli)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147myrk", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1686573076.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003EHow to find all methods which return struct \u0026quot;Foo\u0026quot;.\u003C/p\u003E\n\n\u003Cp\u003EI use vscode, but a cli would be great, too.\u003C/p\u003E\n\n\u003Cp\u003EBut it should not rely on grep or regexs. It should work via AST.\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "147myrk", "is_robot_indexable": true, "report_reasons": null, "author": "guettli", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147myrk/how_to_find_all_methods_which_return_struct_foo/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/147myrk/how_to_find_all_methods_which_return_struct_foo/", "subreddit_subscribers": 207490, "created_utc": 1686573076.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hey Gophers,\n\nJust wrote a step-by-step guild to building a scalable distributed crawler for scraping millions of top TikTok profiles. As a Gopher, most of my part-time projects are written in Golang, here is one of them. Though I'm also proficient in other programming languages, like Python, JavaScript/TypeScript, the love to Golang is unstoppable!\n\nThe core code of this project is also pasted in it. Please have a look at and feel free to leave your opinions.\n\nLink: https://medium.com/@tonywangcn/a-step-by-step-guide-to-building-a-scalable-distributed-crawler-for-scraping-millions-of-top-tiktok-802a7d754e7e", "author_fullname": "t2_4mwgv9hc", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "With Golang and K8S, how I built a distributed crawler for scraping millions of top TikTok profiles", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_146xw8u", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.85, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 44, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 44, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1686500009.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003EHey Gophers,\u003C/p\u003E\n\n\u003Cp\u003EJust wrote a step-by-step guild to building a scalable distributed crawler for scraping millions of top TikTok profiles. As a Gopher, most of my part-time projects are written in Golang, here is one of them. Though I\u0026#39;m also proficient in other programming languages, like Python, JavaScript/TypeScript, the love to Golang is unstoppable!\u003C/p\u003E\n\n\u003Cp\u003EThe core code of this project is also pasted in it. Please have a look at and feel free to leave your opinions.\u003C/p\u003E\n\n\u003Cp\u003ELink: \u003Ca href=\"https://medium.com/@tonywangcn/a-step-by-step-guide-to-building-a-scalable-distributed-crawler-for-scraping-millions-of-top-tiktok-802a7d754e7e\"\u003Ehttps://medium.com/@tonywangcn/a-step-by-step-guide-to-building-a-scalable-distributed-crawler-for-scraping-millions-of-top-tiktok-802a7d754e7e\u003C/a\u003E\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": "confidence", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/VUUyjXvDkBk-e76DABeAWJVoaqO4Nm882XY29CNbWxY.jpg?auto=webp\u0026v=enabled\u0026s=0343fe27d2ab8ca0e27bcac00f6188b1e39fa973", "width": 1200, "height": 462}, "resolutions": [{"url": "https://external-preview.redd.it/VUUyjXvDkBk-e76DABeAWJVoaqO4Nm882XY29CNbWxY.jpg?width=108\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=0addc78076b9daf831c28ce89ca6c9060552afe6", "width": 108, "height": 41}, {"url": "https://external-preview.redd.it/VUUyjXvDkBk-e76DABeAWJVoaqO4Nm882XY29CNbWxY.jpg?width=216\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=93910b43b29b4ef4ec98e6b670d9bae3a7e327cb", "width": 216, "height": 83}, {"url": "https://external-preview.redd.it/VUUyjXvDkBk-e76DABeAWJVoaqO4Nm882XY29CNbWxY.jpg?width=320\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=547f972a7f89570a781f9099582750366554d2e3", "width": 320, "height": 123}, {"url": "https://external-preview.redd.it/VUUyjXvDkBk-e76DABeAWJVoaqO4Nm882XY29CNbWxY.jpg?width=640\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=ebbd7dffda642ea7eb42ebef1172c46b8d711a1a", "width": 640, "height": 246}, {"url": "https://external-preview.redd.it/VUUyjXvDkBk-e76DABeAWJVoaqO4Nm882XY29CNbWxY.jpg?width=960\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=c0cc9e6255853d30511bcff9a76a7a75aea28e37", "width": 960, "height": 369}, {"url": "https://external-preview.redd.it/VUUyjXvDkBk-e76DABeAWJVoaqO4Nm882XY29CNbWxY.jpg?width=1080\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=d04f34d44ecde81c4f36ad0e98c44e6d4eab7258", "width": 1080, "height": 415}], "variants": {}, "id": "yA-6O4lIhv889nmzb5LO7q78NQPRnz1y5CQ2fnVrgJk"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "146xw8u", "is_robot_indexable": true, "report_reasons": null, "author": "the_bigbang", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/146xw8u/with_golang_and_k8s_how_i_built_a_distributed/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/146xw8u/with_golang_and_k8s_how_i_built_a_distributed/", "subreddit_subscribers": 207490, "created_utc": 1686500009.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Currently I have this code and I'd like to execute a different code if `T == rune`. How is it possible?\n\n```\nfunc readScalar[T any]() T {\n\tvar buf T\n\t_, err := fmt.Scan(\u0026buf)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn buf\n}\n```\n\nMy current workaround is to add this, but is there any more beautiful solution?\n```\n\tif reflect.TypeOf(buf) == reflect.TypeOf('a') {\n\t\tpanic(\"type argument shall not be rune\")\n\t}\n```", "author_fullname": "t2_4iuqjamr", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to perform branching depending on the concrete type of `any`?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147chon", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": 1686536983.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1686536582.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003ECurrently I have this code and I\u0026#39;d like to execute a different code if \u003Ccode\u003ET == rune\u003C/code\u003E. How is it possible?\u003C/p\u003E\n\n\u003Cp\u003E\u003Ccode\u003E\nfunc readScalar[T any]() T {\n    var buf T\n    _, err := fmt.Scan(\u0026amp;buf)\n    if err != nil {\n        panic(err)\n    }\n    return buf\n}\n\u003C/code\u003E\u003C/p\u003E\n\n\u003Cp\u003EMy current workaround is to add this, but is there any more beautiful solution?\n\u003Ccode\u003E\n    if reflect.TypeOf(buf) == reflect.TypeOf(\u0026#39;a\u0026#39;) {\n        panic(\u0026quot;type argument shall not be rune\u0026quot;)\n    }\n\u003C/code\u003E\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "147chon", "is_robot_indexable": true, "report_reasons": null, "author": "ynn38", "discussion_type": null, "num_comments": 13, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147chon/how_to_perform_branching_depending_on_the/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/147chon/how_to_perform_branching_depending_on_the/", "subreddit_subscribers": 207490, "created_utc": 1686536582.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "After learning the base could be interesting to see some small nice real project.\n\nDo you know some nice github repository to check the code for learn more ?\n\nIs it a bad idea?", "author_fullname": "t2_78z7qd2z", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "After learning the base", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147tdan", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.36, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "newbie ", "can_mod_post": false, "score": 0, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1686592869.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003EAfter learning the base could be interesting to see some small nice real project.\u003C/p\u003E\n\n\u003Cp\u003EDo you know some nice github repository to check the code for learn more ?\u003C/p\u003E\n\n\u003Cp\u003EIs it a bad idea?\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": "confidence", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "fee5f9ce-a79e-11ec-9b00-9e8ff7414444", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "147tdan", "is_robot_indexable": true, "report_reasons": null, "author": "NoAcanthopterygii587", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147tdan/after_learning_the_base/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/147tdan/after_learning_the_base/", "subreddit_subscribers": 207490, "created_utc": 1686592869.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_69l7x3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A Comprehensive Guide to JSON in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": 73, "top_awarded_type": null, "hide_score": false, "name": "t3_1470o8b", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": null, "ups": 15, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "discussion", "can_mod_post": false, "score": 15, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/81osGIe-d3IV38OkDQI7ky3LWgWwGzHeybLRv9YMjCg.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "subreddit_type": "restricted", "created": 1686506643.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "betterstack.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": "confidence", "banned_at_utc": null, "url_overridden_by_dest": "https://betterstack.com/community/guides/scaling-go/json-in-go", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/BK6tjSLPuu5jElQ3ejq01AZ2Zk69QqHsyM-r7a2LUgU.jpg?auto=webp\u0026v=enabled\u0026s=cfd0a6394a240fc1466547c6a7ba1d26d96a950c", "width": 1200, "height": 630}, "resolutions": [{"url": "https://external-preview.redd.it/BK6tjSLPuu5jElQ3ejq01AZ2Zk69QqHsyM-r7a2LUgU.jpg?width=108\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=37d804b37e083e4cd6ad4e7eed50a6b481553684", "width": 108, "height": 56}, {"url": "https://external-preview.redd.it/BK6tjSLPuu5jElQ3ejq01AZ2Zk69QqHsyM-r7a2LUgU.jpg?width=216\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=af4dc7acd8024b48b5d57678fc1d9558a03a9c79", "width": 216, "height": 113}, {"url": "https://external-preview.redd.it/BK6tjSLPuu5jElQ3ejq01AZ2Zk69QqHsyM-r7a2LUgU.jpg?width=320\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=c8f07510bf461fe1981bf2025126eeeee135d110", "width": 320, "height": 168}, {"url": "https://external-preview.redd.it/BK6tjSLPuu5jElQ3ejq01AZ2Zk69QqHsyM-r7a2LUgU.jpg?width=640\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=eae7ebdf67d4e10fce323dcc7f7e28233a91c13f", "width": 640, "height": 336}, {"url": "https://external-preview.redd.it/BK6tjSLPuu5jElQ3ejq01AZ2Zk69QqHsyM-r7a2LUgU.jpg?width=960\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=8628f61953175e60685d207a7a9c3c2d3e72cb4d", "width": 960, "height": 504}, {"url": "https://external-preview.redd.it/BK6tjSLPuu5jElQ3ejq01AZ2Zk69QqHsyM-r7a2LUgU.jpg?width=1080\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=0d49725ae5c0e6910c6c22d63bf82aa47025aeae", "width": 1080, "height": 567}], "variants": {}, "id": "rHfyEpT-m8pH9Fwh2JD9PruBOlm3laJy5RXGi2MN3OE"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "9e5210de-a6bd-11ec-91c2-421ae0601829", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "mod_note": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "num_reports": null, "removal_reason": null, "link_flair_background_color": "#46d160", "id": "1470o8b", "is_robot_indexable": true, "report_reasons": null, "author": "finallyanonymous", "discussion_type": null, "num_comments": 0, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/1470o8b/a_comprehensive_guide_to_json_in_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://betterstack.com/community/guides/scaling-go/json-in-go", "subreddit_subscribers": 207490, "created_utc": 1686506643.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I have a Go code which massively utilizes generics introduced in Go 1.18.\n\nHowever, it just turned out I have to deploy my code to an environment with Go 1.14. I cannot upgrade the version of Go there.\n\nIs it possible to transpile/convert/expand a Go code with generics to non-generics version **under the condition** that each generic function/struct is instantiated for one type.\n\n---\n\nFor example, I want to transpile this code:\n```\npackage main\n\nimport \"fmt\"\n\nfunc myPrint(t any) {\n\tfmt.Println(t)\n}\n\nfunc main() {\n\tmyPrint(0)\n}\n```\n\ninto\n```\npackage main\n\nimport \"fmt\"\n\nfunc myPrint(t int) {\n\tfmt.Println(t)\n}\n\nfunc main() {\n\tmyPrint(0)\n}\n```\n\n(This is just a minimal working example. The target types aren't necessarily `int` and some generics have type constraints like `[T MyInterface]`.)", "author_fullname": "t2_4iuqjamr", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is there any tool to transpile Go code with generics to non-generics version?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_147amrv", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.7, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": 1686531491.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1686531146.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "\u003C!-- SC_OFF --\u003E\u003Cdiv class=\"md\"\u003E\u003Cp\u003EI have a Go code which massively utilizes generics introduced in Go 1.18.\u003C/p\u003E\n\n\u003Cp\u003EHowever, it just turned out I have to deploy my code to an environment with Go 1.14. I cannot upgrade the version of Go there.\u003C/p\u003E\n\n\u003Cp\u003EIs it possible to transpile/convert/expand a Go code with generics to non-generics version \u003Cstrong\u003Eunder the condition\u003C/strong\u003E that each generic function/struct is instantiated for one type.\u003C/p\u003E\n\n\u003Chr/\u003E\n\n\u003Cp\u003EFor example, I want to transpile this code:\n```\npackage main\u003C/p\u003E\n\n\u003Cp\u003Eimport \u0026quot;fmt\u0026quot;\u003C/p\u003E\n\n\u003Cp\u003Efunc myPrint(t any) {\n    fmt.Println(t)\n}\u003C/p\u003E\n\n\u003Cp\u003Efunc main() {\n    myPrint(0)\n}\n```\u003C/p\u003E\n\n\u003Cp\u003Einto\n```\npackage main\u003C/p\u003E\n\n\u003Cp\u003Eimport \u0026quot;fmt\u0026quot;\u003C/p\u003E\n\n\u003Cp\u003Efunc myPrint(t int) {\n    fmt.Println(t)\n}\u003C/p\u003E\n\n\u003Cp\u003Efunc main() {\n    myPrint(0)\n}\n```\u003C/p\u003E\n\n\u003Cp\u003E(This is just a minimal working example. The target types aren\u0026#39;t necessarily \u003Ccode\u003Eint\u003C/code\u003E and some generics have type constraints like \u003Ccode\u003E[T MyInterface]\u003C/code\u003E.)\u003C/p\u003E\n\u003C/div\u003E\u003C!-- SC_ON --\u003E", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "147amrv", "is_robot_indexable": true, "report_reasons": null, "author": "ynn38", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147amrv/is_there_any_tool_to_transpile_go_code_with/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/147amrv/is_there_any_tool_to_transpile_go_code_with/", "subreddit_subscribers": 207490, "created_utc": 1686531146.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_ijnhzhz7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Quick survey for research on best practices in microservices. The results will be public and focus on developer velocity, deployment times, code complexity, security, and more", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 73, "top_awarded_type": null, "hide_score": false, "name": "t3_147nci1", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.3, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/6CzvJFhAGghTNEHlOBOhhqMCWlzXdSlhy2qww4wCGHY.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1686574220.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "forms.gle", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": "confidence", "banned_at_utc": null, "url_overridden_by_dest": "https://forms.gle/wEDnKDs873EU9oTh8", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/PH4z17VzZBRJJU0LY98_2s_oR5hbzjYfOk_fWm0kk8w.jpg?auto=webp\u0026v=enabled\u0026s=8712d211698e6c0089e7d1a1c18b73fa732d4329", "width": 1200, "height": 630}, "resolutions": [{"url": "https://external-preview.redd.it/PH4z17VzZBRJJU0LY98_2s_oR5hbzjYfOk_fWm0kk8w.jpg?width=108\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=8f3095b629280ac0931b047ecddf33c6c434937d", "width": 108, "height": 56}, {"url": "https://external-preview.redd.it/PH4z17VzZBRJJU0LY98_2s_oR5hbzjYfOk_fWm0kk8w.jpg?width=216\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=456785c8e1f950b96355d7b3ad48d523c5aa61c9", "width": 216, "height": 113}, {"url": "https://external-preview.redd.it/PH4z17VzZBRJJU0LY98_2s_oR5hbzjYfOk_fWm0kk8w.jpg?width=320\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=2471d0f1f099297882c49661d58d4a069815edf7", "width": 320, "height": 168}, {"url": "https://external-preview.redd.it/PH4z17VzZBRJJU0LY98_2s_oR5hbzjYfOk_fWm0kk8w.jpg?width=640\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=88a2c1ad4ee4e0ee90a107fab5cf289fd68f601f", "width": 640, "height": 336}, {"url": "https://external-preview.redd.it/PH4z17VzZBRJJU0LY98_2s_oR5hbzjYfOk_fWm0kk8w.jpg?width=960\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=b096f22610f41d5e147608c507e0a160861a0c0c", "width": 960, "height": 504}, {"url": "https://external-preview.redd.it/PH4z17VzZBRJJU0LY98_2s_oR5hbzjYfOk_fWm0kk8w.jpg?width=1080\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=9134ff40bda3048201a7cf32d279a2b5a8225951", "width": 1080, "height": 567}], "variants": {}, "id": "ttQE3CftPQhwxvbSDmzBvudUjt23yHF4zILhzVz06Ig"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "147nci1", "is_robot_indexable": true, "report_reasons": null, "author": "Necessary-Cow-204", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147nci1/quick_survey_for_research_on_best_practices_in/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://forms.gle/wEDnKDs873EU9oTh8", "subreddit_subscribers": 207490, "created_utc": 1686574220.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_gg5zo", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Processing huge files in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_146houm", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.84, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 84, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "show \u0026 tell", "can_mod_post": false, "score": 84, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1686449085.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "madhur.co.in", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": "confidence", "banned_at_utc": null, "url_overridden_by_dest": "https://www.madhur.co.in/blog/2023/06/10/processing-huge-log-files.html", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "8e5426fe-a6bd-11ec-a6a4-1ed4e247a1dd", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#7193ff", "id": "146houm", "is_robot_indexable": true, "report_reasons": null, "author": "madhur_ahuja", "discussion_type": null, "num_comments": 37, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/146houm/processing_huge_files_in_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.madhur.co.in/blog/2023/06/10/processing-huge-log-files.html", "subreddit_subscribers": 207490, "created_utc": 1686449085.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_o7avh1pc", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Web Development em Go - Parte 18 - Deletando um Post (language: PT-BR)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 105, "top_awarded_type": null, "hide_score": false, "name": "t3_147mv0q", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.25, "author_flair_background_color": null, "subreddit_type": "restricted", "ups": 0, "total_awards_received": 0, "media_embed": {"content": "\u003Ciframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/SGb1ArTRE4Y?feature=oembed\u0026enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Web Development em Go - Parte 18 - Deletando um Post #golang #webdevelopment\"\u003E\u003C/iframe\u003E", "width": 356, "scrolling": false, "height": 200}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Web Development em Go - Parte 18 - Deletando um Post #golang #webdevelopment", "type": "video", "thumbnail_width": 480, "height": 200, "width": 356, "html": "\u003Ciframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/SGb1ArTRE4Y?feature=oembed\u0026enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Web Development em Go - Parte 18 - Deletando um Post #golang #webdevelopment\"\u003E\u003C/iframe\u003E", "author_name": "Robson Dev", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/SGb1ArTRE4Y/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/@RobsonDev"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "\u003Ciframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/SGb1ArTRE4Y?feature=oembed\u0026enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Web Development em Go - Parte 18 - Deletando um Post #golang #webdevelopment\"\u003E\u003C/iframe\u003E", "width": 356, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/147mv0q", "height": 200}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "https://a.thumbs.redditmedia.com/J4Hwx7ucCEUzZTCp-5nLLu_qnKpCwuKgDkCjvmRvLS0.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "rich:video", "content_categories": null, "is_self": false, "mod_note": null, "created": 1686572774.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": "confidence", "banned_at_utc": null, "url_overridden_by_dest": "https://youtube.com/watch?v=SGb1ArTRE4Y\u0026feature=share", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/o6wXQ9CgMYNw0WJGI_iG_Ybkc_6OrwXdekSWBNPRcqU.jpg?auto=webp\u0026v=enabled\u0026s=c96400fc3e3837484fb915e5b10c1fb13ae7c447", "width": 480, "height": 360}, "resolutions": [{"url": "https://external-preview.redd.it/o6wXQ9CgMYNw0WJGI_iG_Ybkc_6OrwXdekSWBNPRcqU.jpg?width=108\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=8a63887735b26c2800ada95944a8a8dc00b6dba3", "width": 108, "height": 81}, {"url": "https://external-preview.redd.it/o6wXQ9CgMYNw0WJGI_iG_Ybkc_6OrwXdekSWBNPRcqU.jpg?width=216\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=62733a18ec7925fb230418cfb063774de3efc426", "width": 216, "height": 162}, {"url": "https://external-preview.redd.it/o6wXQ9CgMYNw0WJGI_iG_Ybkc_6OrwXdekSWBNPRcqU.jpg?width=320\u0026crop=smart\u0026auto=webp\u0026v=enabled\u0026s=0095884c0e4cfb9aa9aa939b8332c85d356a001f", "width": 320, "height": 240}], "variants": {}, "id": "TEves3T8uKkG4Xu9Un5EbrBYESMr9DSpT-vMZjmpGZY"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "147mv0q", "is_robot_indexable": true, "report_reasons": null, "author": "robsongomes84", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/147mv0q/web_development_em_go_parte_18_deletando_um_post/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://youtube.com/watch?v=SGb1ArTRE4Y\u0026feature=share", "subreddit_subscribers": 207490, "created_utc": 1686572774.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Web Development em Go - Parte 18 - Deletando um Post #golang #webdevelopment", "type": "video", "thumbnail_width": 480, "height": 200, "width": 356, "html": "\u003Ciframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/SGb1ArTRE4Y?feature=oembed\u0026enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Web Development em Go - Parte 18 - Deletando um Post #golang #webdevelopment\"\u003E\u003C/iframe\u003E", "author_name": "Robson Dev", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/SGb1ArTRE4Y/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/@RobsonDev"}}, "is_video": false}}], "before": null}}