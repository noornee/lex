name: Building for all OSs

on:
  push:
    tags:
      - "v*"
  pull_request:

env:
  latest_version: '1.20'

jobs:
  checkvalidity:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go Environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.latest_version }}
          check-latest: true
          cache: false
    
      - name: Install Prerequisites
        run: |
          go install golang.org/x/tools/go/analysis/passes/fieldalignment/cmd/fieldalignment@latest
          npm install -g sass

      - name: Check fieldalignment
        run: |
          fieldalignment types.go
          didFail=$?
          if [ $didFail -ne 0 ]; then
            exit 1
          fi
        working-directory: src/logic/types
      
      - name: Check SCSS
        run: |
          sass --style=compressed --no-source-map main.scss main.min.css
          didFail=$?
          if [ $didFail -ne 0 ]; then
            exit 1
          fi
        working-directory: src/router/css
      
  runtests:
    strategy:
      matrix:
        goversion: ['1.19', '1.20']
        platform: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    needs: checkvalidity
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go Environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.goversion }}
          check-latest: true
          cache: false
      
      - name: Run Tests
        run: go test -v -race .
        working-directory: src/router

  linuxbuild:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: runtests
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Go Environment
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.latest_version }}
        check-latest: true
        cache: false
        
    - name: Main Linux Build
      run: |
        echo "Updating Go Dependencies"
        go get -u
                
        echo "Installing Sass"
        npm install -g sass
        
        echo "Converting SCSS to CSS"
        sass --style=compressed --no-source-map ../../src/router/css/main.scss ../../src/router/css/main.min.css
        rm ../../src/router/css/main.scss

        echo "Building for 64bit Linux"
        go build -ldflags="-s -w" -v -o lex-amd64-linux main.go
        
        echo "Building for 32bit Linux"
        GOARCH=386 go build -ldflags="-s -w" -v -o lex-i386-linux main.go
        
        echo "Zipping Files"
        7z a lex-linux.zip lex-i386-linux lex-amd64-linux ../../LICENSE
        
        echo "Ok."
      working-directory: cmd/lex/
                                  
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          cmd/lex/lex-linux.zip
          
  macbuild:
    if: github.event_name != 'pull_request'
    runs-on: macos-latest
    needs: runtests
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Go Environment
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.latest_version }}
        check-latest: true
        cache: false
    
    - name: Main MacOS Build
      run: |
        echo "Updating Go Dependencies"
        go get -u
                
        echo "Installing Sass"
        npm install -g sass
        
        echo "Converting SCSS to CSS"
        sass --style=compressed --no-source-map ../../src/router/css/main.scss ../../src/router/css/main.min.css
        rm ../../src/router/css/main.scss

        echo "Building for Intel macOS"
        go build -ldflags="-s -w" -v -o lex-amd64-darwin main.go
        
        echo "Building for M1 macOS"
        GOARCH=arm64 go build -ldflags="-s -w" -v -o lex-arm64-darwin main.go
        
        echo "Zipping Files"
        7z a lex-darwin.zip lex-amd64-darwin lex-arm64-darwin ../../LICENSE
        
        echo "Ok."
      working-directory: cmd/lex/
                          
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          cmd/lex/lex-darwin.zip
          
  winbuild:
    if: github.event_name != 'pull_request'
    runs-on: windows-latest
    needs: runtests
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Go Environment
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.latest_version }}
        check-latest: true
        cache: false

    - name: Main Windows Build
      run: |
        echo "Updating Go Dependencies"
        go get -u
                
        echo "Installing Sass"
        npm install -g sass
        
        echo "Converting SCSS to CSS"
        sass --style=compressed --no-source-map ../../src/router/css/main.scss ../../src/router/css/main.min.css
        del ../../src/router/css/main.scss

        echo "Building for 64bit Windows"
        go build -ldflags="-s -w" -v -o lex-amd64-windows.exe main.go
        
        echo "Building for 32bit Windows"
        $Env:GOARCH = '386'
        go build -ldflags="-s -w" -v -o lex-i386-windows.exe main.go
        
        echo "Zipping Files"
        7z a lex-windows.zip lex-i386-windows.exe lex-amd64-windows.exe ../../LICENSE
        
        echo "Ok."
      working-directory: cmd/lex/
                                
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          cmd/lex/lex-windows.zip
